#!/bin/bash

MOD_DIR="/home/k/.local/share/multimc/instances/1.8.9/.minecraft/mods"

# ModName | RepoIdentifier | FileRegex | VersionRegex | TagFilter
# For GitHub, the repo identifier is in the format "user/RepoName"
# For Modrinth, the identifier is in the format "modrinth:slug"

read -r -d '' mod_configs_data <<'EOF'
SkyHanni|hannibal002/SkyHanni|^SkyHanni-[0-9]+\.[0-9]+\.[0-9]+-mc1\.8\.9\.jar$|(?<=SkyHanni-)[0-9]+\.[0-9]+\.[0-9]+(?=-mc1\.8\.9\.jar)|s/^v//
Skytils|Skytils/SkytilsMod|^Skytils-[0-9]+\.[0-9]+\.[0-9]+\.jar$|(?<=Skytils-)[0-9]+\.[0-9]+\.[0-9]+(?=\.jar)|s/^v//
BazaarNotifier|symt/BazaarNotifier|^BazaarNotifier-[0-9]+\.[0-9]+\.[0-9]+\.jar$|(?<=BazaarNotifier-)[0-9]+\.[0-9]+\.[0-9]+(?=\.jar)|s/^v//
Dungeon_Rooms|Quantizr/DungeonRoomsMod|^Dungeon_Rooms-[0-9]+\.[0-9]+\.[0-9]+\.jar$|(?<=Dungeon_Rooms-)[0-9]+\.[0-9]+\.[0-9]+(?=\.jar)|s/^v//
NotEnoughUpdates|modrinth:notenoughupdates|^NotEnoughUpdates-[0-9]+\.[0-9]+\.[0-9]+\.jar$|(?<=NotEnoughUpdates-)[0-9]+\.[0-9]+\.[0-9]+(?=\.jar)|s/^v//
EOF

readarray -t mod_configs <<< "$mod_configs_data"

get_latest_tag() {
  local repo="$1"
  if [[ "$repo" == modrinth:* ]]; then
    local slug="${repo#modrinth:}"
    curl -s "https://api.modrinth.com/v2/project/$slug/version" | \
      jq -r 'sort_by(.date_published) | .[-1].version_number'
  else
    curl -s "https://api.github.com/repos/$repo/releases" | jq -r '.[0].tag_name'
  fi
}

download_release_asset() {
  local mod_name=$1
  local repo=$2
  local tag=$3
  if [[ "$repo" == modrinth:* ]]; then
    local slug="${repo#modrinth:}"
    local version_json
    version_json=$(curl -s "https://api.modrinth.com/v2/project/$slug/version")
    local asset_url
    asset_url=$(echo "$version_json" | jq -r --arg tag "$tag" 'map(select(.version_number == $tag)) | .[0].files[0].url')
    if [ -z "$asset_url" ] || [ "$asset_url" == "null" ]; then
      echo "Couldn't find the URL for $mod_name on Modrinth"
      return 1
    fi
    local filename
    filename=$(basename "$asset_url")
    echo "Downloading $filename for $mod_name from Modrinth..."
    if curl -L -s -o "$MOD_DIR/$filename" "$asset_url"; then
      echo "Downloaded $mod_name succesfully."
    else
      echo "ERROR: Failed to download $mod_name."
      return 1
    fi
  else
    local api_url="https://api.github.com/repos/$repo/releases"
    local asset_url
    asset_url=$(curl -s "$api_url" | jq -r ".[] | select(.tag_name == \"$tag\") | .assets[0].browser_download_url")
    if [ -z "$asset_url" ]; then
      echo "Couldn't find asset URL for $mod_name"
      return 1
    fi
    local filename
    filename=$(basename "$asset_url")
    echo "Downloading $filename for $mod_name from GitHub..."
    if curl -L -s -o "$MOD_DIR/$filename" "$asset_url"; then
      echo "Downloaded $mod_name succesfully."
    else
      echo "ERROR: Failed to download $mod_name."
      return 1
    fi
  fi
}

process_mod() {
  IFS='|' read -r name repo file_regex version_regex tag_filter <<< "$1"
  echo -e "\nChecking $name..."
  local local_file
  local_file=$(ls "$MOD_DIR" 2>/dev/null | grep -E "$file_regex" | head -1)
  if [ -z "$local_file" ]; then
    echo "$name not found in mods folder."
    return
  fi
  local local_version
  local_version=$(echo "$local_file" | grep -oP "$version_regex")
  if [ -z "$local_version" ]; then
    echo "Failed to read $name's local version."
    return
  fi
  local latest_tag
  latest_tag=$(get_latest_tag "$repo")
  if [ -z "$latest_tag" ]; then
    echo "Failed to get latest release info for $name."
    return
  fi
  local latest_version
  latest_version=$(echo "$latest_tag" | sed "$tag_filter")
  if [ "$local_version" != "$latest_version" ]; then
    echo "Update found for $name: $local_version -> $latest_version"
    echo "Deleting old version: $local_file"
    if rm -f "$MOD_DIR/$local_file"; then
      if download_release_asset "$name" "$repo" "$latest_tag"; then
        echo "Updated $name to version $latest_version."
      else
        echo "ERROR: Failed to update $name."
      fi
    else
      echo "ERROR: Failed to remove old version of $name."
    fi
  else
    echo "$name is already on latest ($local_version)."
  fi
}

for config in "${mod_configs[@]}"; do
  process_mod "$config"
done
